DES_GOBSTG_SCRIPTFILE 99

STAGEFILE

// 第八讲，控制语句

/////////////////////////////////////////////

# 101	// 子关卡

@ 1

BGSETUP 0 0x0100 true
BGSETUP 4 0x0140 true

ENTEXASSIGN 24 24 24 24

EB 0x1100 0xff
	220 180 9000 0.0
	3 4096 4096 0x00000000
// 创建一个基本上无敌的怪

SDf [_0] PSPEED
SDf [_1] PSLOWSPEED

// 使用浮点形式存储玩家的两个速度，存入系统变量

@ @@% 120

SD [timemod] TIME % 240 !
// 注意约束条件，当帧为120的倍数时进入约束块，则TIME % 240取值只能为0或者120
// 取逻辑非可以让结果转化为1和0，这是为了得到奇偶轮

SD [i] 3
LOOP [i]
// i在循环中分别取值为2、1、0
{
	SD [tarID] i * 2 + timemod
// 奇偶次对应的tarID不同，一共会生成六个不同的tarID
// 取奇偶次的意义在于让特效不会直接被强制替换，而是轮替交互
	EFFSETUPEX tarID 60 160
		RANDR 100 + 220 RANDR 60 + 320 0 tarID
		9000 0.0 0.0
// 使用tarID作为特效组编号，让每个目标绑定的特效拥有不同的组别
// 并且，目标ID相同的特效会根据奇偶轮自我更替，不会互相影响
}
// 每个奇偶单轮循环执行三次，产生了三个拥有不同绑定目标的特效
// 我们要做的是接触这些特效造成玩家移动拖慢效果

@ @@[ 120

SD [isColli] 0
// 假设没有在区域内

IF TIME % 120 < 100
// 特效消失时间假设为100，则每单轮的后20帧玩家不会被拖慢
{
	SD [timemod] TIME % 240 < 120
// 注意这里的取值办法不同，因为这个约束条件是>=120，为连续值
	SD [i] 3
	LOOP [i]
	{
		SD [tarID] i * 2 + timemod
		COLLISION_CIRCLE PX PY
			TX tarID TY tarID 45 [isColli]
// 此句计算了玩家和目标的碰撞，是否碰撞存储在指针中，判定半径为45
		IF isColli
		{
			SD [i] 0
// 这是一个跳出循环的办法，将循环变量置0
// 但由于不是真正的立即跳出，所以会执行其下面的内容（如果有）
// 除了这个用途之外，不建议在循环中改变循环变量的值
		}
	}
	
	IF isColli
// 如果碰撞了
	{
		SETPSPEED _0 /f 2.0
		SETPSLOWSPEED _1 /f 2.0
// 将玩家减速
	}
}

// 注意上面的结构，在IF块中并列套用了LOOP和IF，同时LOOP块中还有一个IF
// 这种嵌套是不限制的，但是为了效率起见，还是不要套用太多的好

IF isColli !
// 只要没有碰撞
{
	SETPSPEED _0
	SETPSLOWSPEED _1
// 将玩家速度设置成保存的值
}

// 本教程结束，请选择幻难度继续教程

@ 1